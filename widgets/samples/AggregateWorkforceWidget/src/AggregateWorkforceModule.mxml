<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" layout="absolute"
		   implements="com.ikanow.infinit.e.widget.library.widget.IWidget">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style source="/com/ikanow/infinit/e/assets/styles/infiniteDefaultStyle.css" />
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		/* If you need to override a style in our stylesheet, or add another
		style that we did not support you can do so here, an example has been commented out
		Please see documentation about over-riding MX component styles to display fonts*/
		/*
		mx|Text
		{
		font-family: infiniteNonCFFFont;
		}
		*/
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.ikanow.infinit.e.widget.library.utility.JSONDecoder;
			import com.ikanow.infinit.e.widget.library.widget.IWidgetContext;
			
			import mx.charts.CategoryAxis;
			import mx.charts.ColumnChart;
			import mx.charts.Legend;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.series.ColumnSeries;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.alivepdf.pdf.PDF;
			
			private var _context:IWidgetContext;
			private var widgetOptions:Object = null;
			private var API_SERVER:String = "http://infinite.wfot.ikanow.com/api/";
			
			// Create a data collection array that will allow the chart to be displayed
			[Bindable]private var dataCollection:ArrayCollection;
						
			/**
			 * Method fired when module is done loading.  Sends
			 * message to parent letting it know that module is
			 * ready to receive data.
			 */
			private function onWidgetCreationComplete():void
			{
				var events:Event = new Event("Done Loading");
				dispatchEvent(events);
			}
			
			/**
			 * IWidget interface to receive data object (IWidgetContext).
			 * Store the iwidgetcontext so we can receieve data later.
			 */
			public function onInit(context:IWidgetContext):void
			{
				_context = context;
				
				infiniteWorkforceService.url = API_SERVER + "knowledge/mapreduce/getresults/irs_workforce_year";
				infiniteWorkforceService.send();
				
			}
			
			/**
			 * IWidget interface that fires when a new query is done.
			 * We can access the data from the query by using our
			 * iwidgetcontext object context.getQuery_TopResults().getTopDocuments();
			 */
			public function onReceiveNewQuery():void
			{
				
			}
			
			/**
			 * Result event for mapreduce call, checks if it was successful then formats json
			 * response to an array list
			 */
			protected function infiniteWorkforceServiceResult(event:ResultEvent):void
			{	
				// Get the JSON Data from the Infinit.e Service
				var dataJson:Object = JSONDecoder.decode(event.result as String);
				// Establish a data collection to contain that will serve as the source of data for the chart
				dataCollection = new ArrayCollection();

				if ( dataJson.response.success.toString() == "true" )
				{
					// here is where you load up the data after the service call
					for each(var i:Object in dataJson.data.results)
					{
						var obj:Object = new Object();
						if (i._id.year != null)
						{
							// Add the year and aggregate to the object
							obj.year = i._id.year.toString();
							obj.aggregate = i.value.begempcnt.toString();
							// push it to the array collection
							dataCollection.source.push(obj);
						}
						
					}
					// Add the data to chart
					chart.dataProvider = dataCollection;
									
				}
				else
				{
					cursorManager.removeAllCursors();
					Alert.show("Error retrieving Data.\n " + (data.response.message as String));
				}				
			}
			
			
			/**
			 * Error sending API request.
			 */
			protected function infiniteWorkforceServiceFault(event:FaultEvent):void
			{
				cursorManager.removeAllCursors();
				Alert.show("Error retrieving Workforce Data\n" + event.fault.message);
			}
			
			/**
			 * @returns A list of supported formats, displayed in a context menu in the format
			 * "Export <string>" - these are called with "onGenerateExportData"
			 * Note this doesn't cover the "built-in" Alive PDF export.
			 * However if the developer specifies PDF and onGeneratePdf() returns non-null then this will be used.
			 */
			
			public function supportedExportFormats():ArrayCollection
			{
				var ac:ArrayCollection = new ArrayCollection();
				return ac;
			}
			/**
			 * function to build a pdf version of the widget
			 * 
			 * @return pdf version of the widget 
			 */
			public function onGeneratePDF(printPDF:PDF, title:String):PDF
			{
				return null;
			}
			
			/**
			 * function to rescale the module when the parent container is being resized
			 * 
			 * @param newHeight The new height the component needs to be set to
			 * @param newWidth The new width the component needs to be set to
			 */ 
			public function onParentResize(newHeight:Number,newWidth:Number):void
			{
				this.height = newHeight;
				this.width = newWidth;
			}
			
			/**
			 * This function gets called when the workspace is being saved.
			 * return null if no save string is needed.
			 * 
			 * @return a string this widget can use to reload state
			 */
			public function onSaveWidgetOptions():Object
			{
				return null;
			}
			
			/**
			 * Allow users to export the widget contents in the specified format
			 * @format filename: the filename+path to which the data will be written (in case it needs to be embedded)
			 * @param format: the format from the "supportedFormats" call
			 * 
			 * @returns a ByteArray containing the data to output
			 */
			public function onGenerateExportData(filename:String, format:String):ByteArray
			{
				return null;
			}
			
			/**
			 * IWidget interface that fires when a new filter is done (including from ourself)
			 * We can access the data fromt he filter by using our
			 * iwidgetcontext object _context.getQuery_FilteredResults().getTopDocuments();
			 */  
			public function onReceiveNewFilter():void
			{
				//get filtered logic here
				_context.getQuery_FilteredResults().getTopDocuments();
			}
			
			/**
			 * If a save string has been saved from 'getSaveString' then
			 * when the app gets reloaded the last save string
			 * will be passed to this function.
			 * 
			 * @param saveString the last save string or null if there was none
			 */
			public function onLoadWidgetOptions(widgetOptions:Object):void
			{
				this.widgetOptions = widgetOptions;
			}
			

		]]>
	</fx:Script>
	<fx:Declarations>
		<s:HTTPService id="infiniteWorkforceService"
					   result="infiniteWorkforceServiceResult(event)"
					   fault="infiniteWorkforceServiceFault(event)"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:VGroup width="90%" height="90%" verticalAlign="middle" horizontalAlign="center" 
			  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<s:HGroup width="100%" height="100%" verticalAlign="top" horizontalAlign="center">
			<mx:ColumnChart id="chart" width="100%" height="100%" color="0x323232"
							showDataTips="true">		
				<mx:horizontalAxis>
					<mx:CategoryAxis categoryField="year" displayName="Year"/>
				</mx:horizontalAxis>
							
				<mx:series>
					<mx:ColumnSeries xField="year" yField="aggregate" displayName="Aggregate Workforce"/>
				</mx:series>
			</mx:ColumnChart>
			<mx:Legend id="legend" dataProvider="{chart}"/>
		</s:HGroup>
	</s:VGroup>
</mx:Module>
