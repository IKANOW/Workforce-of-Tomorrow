<?xml version="1.0" encoding="utf-8"?>
<components:WidgetModule xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:pivot="com.flexmonster.pivot.*"
		   xmlns:components="com.ikanow.infinit.e.widget.library.components.*"
		   implements="com.ikanow.infinit.e.widget.library.widget.IWidget"
		   >
	<fx:Style source="/com/ikanow/infinit/e/assets/styles/infiniteDefaultStyle.css" />
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		/* If you need to override a style in our stylesheet, or add another
		style that we did not support you can do so here, an example has been commented out
		Please see documentation about over-riding MX component styles to display fonts*/
		/*
		mx|Text
		{
		font-family: infiniteNonCFFFont;
		}
		*/
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.flexmonster.pivot.data.consts.SortType;
			import com.flexmonster.pivot.events.CellClickEvent;
			import com.flexmonster.pivot.model.export.ExportType;
			import com.flexmonster.pivot.model.report.DestinationType;
			import com.flexmonster.pivot.model.report.vo.ReportValueObject;
			import com.flexmonster.pivot.view.ViewType;
			import com.flexmonster.pivot.view.charts.ChartType;
			import com.flexmonster.pivot.view.grid.vo.PivotGridCell;
			import com.ikanow.infinit.e.widget.library.framework.WidgetSaveObject;
			import com.ikanow.infinit.e.widget.library.utility.JSONDecoder;
			import com.ikanow.infinit.e.widget.library.utility.URLEncoder;
			import com.ikanow.infinit.e.widget.library.widget.IWidgetContext;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.Tree;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.alivepdf.pdf.PDF;
			
			import spark.events.IndexChangeEvent;
			
			import system.data.maps.HashMap;
			
			private var _context:IWidgetContext;
			private var titleArray:ArrayCollection = new ArrayCollection();
			private var widgetOptions:Object = null;
			private var API_SERVER:String = flash.external.ExternalInterface.call("getEndPointUrl");
			private var SWAT_SERVER:String = flash.external.ExternalInterface.call("getIRSServerUrl");
			[Bindable]
			//SBSE Workforce Advanced
			private var CONFIG_LOC:String = API_SERVER + "share/get/52efceece4b05c1a59af1bc3";
			
			//SBSE Workforce POD
			//private var CONFIG_LOC:String = API_SERVER + "share/get/52f2df3de4b08250543f235d";
			
			//SBSE Workload Advanced
			
			//SBSE Workforce Supply vs Demand
			//private var CONFIG_LOC:String = API_SERVER + "share/get/52f95152e4b06996a133dd7e";
			
			//SBSE Workload Advanced
			//private var CONFIG_LOC:String = API_SERVER + "share/get/52fa5c32e4b01a0f92b6d5db";
			
			//Supply Demand
			//private var CONFIG_LOC:String = API_SERVER + "share/get/4efe252a2335b5055c00d486";
			
			//Workforce Advanced
			//private var CONFIG_LOC:String = API_SERVER + "share/get/4efe2ada2335b5055c00d4ae";
			
			//Workforce BOD
			//private var CONFIG_LOC:String = API_SERVER + "share/get/4efe621d2335b5055c00d4cb";
			
			//Workforce Workstream
			//private var CONFIG_LOC:String = API_SERVER + "share/get/4efe624b2335b5055c00d4ce";
			
			//Workload Advanced
			//private var CONFIG_LOC:String = API_SERVER + "share/get/4efe626b2335b5055c00d4d1";
			
			//Workload BOD
			//private var CONFIG_LOC:String = API_SERVER + "share/get/4efe62b02335b5055c00d4d7";
			
			//Workload Workstream
			//private var CONFIG_LOC:String = API_SERVER + "share/get/4efe62c02335b5055c00d4da";
			
			//Staffing Budget
			//private var CONFIG_LOC:String = API_SERVER + "share/get/50b39e3d2335910cd750be22";
			
			//Local
			//private var CONFIG_LOC:String = "pivot_configs/staffing_budget.xml";
			
			private var HIDE_PIE_CHART:Boolean = (CONFIG_LOC == ((API_SERVER + "share/get/4efe252a2335b5055c00d486") || CONFIG_LOC == (API_SERVER + "share/get/52f95152e4b06996a133dd7e")));

			private var ORIGINAL_DATA_LOC:String = null;
			private var scenarioIds:ArrayList = null;
			private var scenarioId:String = "";
			private var scenariodp:ArrayList = null;
			private var sl:scenarioLoader = new scenarioLoader();
			
			[Bindable]
			private var LOAD_MODE:String;
			
			
			
			/**
			 * Method fired when module is done loading.  Sends
			 * message to parent letting it know that module is
			 * ready to receive data.
			 */
			private function onWidgetCreationComplete():void
			{
				var events:Event = new Event("Done Loading");
				dispatchEvent(events);
			}
			
			/**
			 * IWidget interface to receive data object (IWidgetContext).
			 * Store the iwidgetcontext so we can receieve data later.
			 */
			public function onInit(context:IWidgetContext):void
			{
				_context = context;
			}

			
			private function launchPopUp(e:MouseEvent):void 
			{
				if ( null == ORIGINAL_DATA_LOC && null != pivotChart.getReport() && null != pivotChart.getReport().filename)
				{
					ORIGINAL_DATA_LOC = pivotChart.getReport().filename;
				}
				
				if (ORIGINAL_DATA_LOC.indexOf("sbsepivotData") != -1) {
					if (ORIGINAL_DATA_LOC.indexOf("wlwf=wf") != -1)
						LOAD_MODE = loaderMode.SBSE_WORKFORCE;
					else if (ORIGINAL_DATA_LOC.indexOf("wlwf=wl") != -1)
						LOAD_MODE = loaderMode.SBSE_WORKLOAD;
					else if (ORIGINAL_DATA_LOC.indexOf("wlwf=union") != -1)
						LOAD_MODE = loaderMode.SBSE_UNION;
				}
				else
				{
					if (ORIGINAL_DATA_LOC.indexOf("wlwf=wfb") != -1)
						LOAD_MODE = loaderMode.STAFFINGBUDGET;
					else if (ORIGINAL_DATA_LOC.indexOf("wlwf=wf") != -1)
						LOAD_MODE = loaderMode.WORKFORCE;
					else if (ORIGINAL_DATA_LOC.indexOf("wlwf=wl") != -1)
						LOAD_MODE = loaderMode.WORKLOAD;
					else if (ORIGINAL_DATA_LOC.indexOf("wlwf=union") != -1)
						LOAD_MODE = loaderMode.UNION;
				}
					
				
				sl.LOAD_MODE = LOAD_MODE;
				PopUpManager.addPopUp(sl,this,true);
				PopUpManager.centerPopUp(sl);
				
				sl.submit_button.addEventListener(MouseEvent.CLICK,newScenarioSelected);
			}
			
			
			/**
			 * IWidget interface that fires when a new query is done.
			 * We can access the data from the query by using our
			 * iwidgetcontext object context.getQuery_TopResults().getTopDocuments();
			 */
			public function onReceiveNewQuery():void
			{
				//Not used for IRS Data
			}
			
			/**
			 * If a save object has been saved from 'onSaveWidgetOptions' then
			 * when the app gets reloaded the last save string
			 * will be passed to this function.
			 *
			 * @param widgetOptions the last save object or null if there was none
			 */
			public function onLoadWidgetOptions( widgetOptions:WidgetSaveObject ):void
			{
				this.widgetOptions = widgetOptions.userSave;
			}
			
			/**
			 * @returns A list of supported formats, displayed in a context menu in the format
			 * "Export <string>" - these are called with "onGenerateExportData"
			 * Note this doesn't cover the "built-in" Alive PDF export.
			 * However if the developer specifies PDF and onGeneratePdf() returns non-null then this will be used.
			 */
			
			public function supportedExportFormats():ArrayCollection
			{
				return null;
			}
			/**
			 * function to build a pdf version of the widget
			 * 
			 * @return pdf version of the widget 
			 */
			public function onGeneratePDF(printPDF:PDF, title:String):PDF
			{
				return null;
			}
			
			/**
			 * function to rescale the module when the parent container is being resized
			 * 
			 * @param newHeight The new height the component needs to be set to
			 * @param newWidth The new width the component needs to be set to
			 */ 
			public function onParentResize(newHeight:Number,newWidth:Number):void
			{
				this.height = newHeight;
				this.width = newWidth;
			}
			
			/**
			 * This function gets called when the workspace is being saved.
			 * return null if no save string is needed.
			 * 
			 * @return a string this widget can use to reload state
			 */
			public function onSaveWidgetOptions():Object
			{
				return null;
			}
			
			/**
			 * Allow users to export the widget contents in the specified format
			 * @format filename: the filename+path to which the data will be written (in case it needs to be embedded)
			 * @param format: the format from the "supportedFormats" call
			 * 
			 * @returns a ByteArray containing the data to output
			 */
			public function onGenerateExportData(filename:String, format:String):ByteArray
			{
				return null;
			}
			
			/**
			 * IWidget interface that fires when a new filter is done (including from ourself)
			 * We can access the data fromt he filter by using our
			 * iwidgetcontext object _context.getQuery_FilteredResults().getTopDocuments();
			 */  
			public function onReceiveNewFilter():void
			{
				// Not used for IRS Data
			}
			
			
			
			private function get componentFolder():String {
				return (FlexGlobals.topLevelApplication.parameters['componentFolder'] == null) ? 'flexmonster/' : FlexGlobals.topLevelApplication.parameters['componentFolder']; 
			}
			
			private function onGridClick(event:Event):void {
				var cell:PivotGridCell = (event as CellClickEvent).cell;
				var rows:Array = [];
				for (var i:int = 0; i < cell.rows.length; i++) {
					var row:Object = cell.rows[i];
					rows.push(row.hierarchyCaption + "=" + row.caption);
				}
				var rowStr:String = rows.join(", ");
				
				var columns:Array = [];
				for (i = 0; i < cell.columns.length; i++) {
					var column:Object = cell.columns[i];
					columns.push(column.hierarchyCaption + "=" + column.caption);
				}
				var columnStr:String = columns.join(", ");
				
				Alert.show("Rows: " + rowStr + "\nColumns: " + columnStr + "\nValue:" + cell.label);
			}
			
			private function exportRawCSV():void {
				pivotChart.export(ExportType.CSV, null, onExportRawCSV);
			}
			
			private function onExportRawCSV(data:String):void {
				Alert.show(data);
			}
			
			
			protected function export_changeHandler(event:IndexChangeEvent):void {
				
				switch (exportDrop.selectedItem.toString())
				{
					case "CSV":
					{
						pivotChart.showGrid();
						pivotChart.export(ExportType.CSV)
						break;
					}
					case "CSV Raw":
					{
						saveToFile();
						Alert.show("Not yet implemented");
						//var myFileReference:FileReference = new FileReference();
						//navigateToURL(new URLRequest("http://infinite.wfot.ikanow.com/api/custom/rdbms/getresults/4e9c77ef17ef3523b657a890?dbid=irs&output.format=csv&query=SELECT * FROM vw_union"), "_wfot");
						//myFileReference.save(new URLRequest("http://infinite.wfot.ikanow.com/api/custom/rdbms/getresults/4e9c77ef17ef3523b657a890?dbid=irs&output.format=csv&query=SELECT * FROM vw_union").toString(), "pivot.txt");
						break;
					}
					case "Image":
					{
						pivotChart.export(ExportType.IMAGE)
						break;
					}
					case "PDF":
					{
						pivotChart.export(ExportType.PDF)
						break;
					}
					case "Excel":
					{
						pivotChart.showGrid();
						pivotChart.export(ExportType.EXCEL)
						break;
					}
					case "Html":
					{
						pivotChart.export(ExportType.HTML)
						break;
					}
				    default :
					{
						
					}
				}
				
				exportDrop.selectedIndex = 0;
			}
			
			
			
			//Grid,Bar,Bar Stack,Scatter,Cylinder,Pie,Line
			protected function view_changeHandler(event:IndexChangeEvent):void {
				
				switch (viewDrop.selectedItem.toString())
				{
					case "Grid":
					{
						pivotChart.showGrid();
						break;
					}
					case "Bar":
					{
						pivotChart.showCharts(ChartType.BAR);
						break;
					}
					case "Stack":
					{
						pivotChart.showCharts(ChartType.BAR_STACK);
						break;
					}
					case "Scatter":
					{
						pivotChart.showCharts(ChartType.SCATTER);
						break;
					}
					case "Cylinder":
					{
						pivotChart.showCharts(ChartType.CYLINDER);
						break;
					}
					case "Pie":
					{
						pivotChart.showCharts(ChartType.PIE);
						break;
					}
					case "Line":
					{
						pivotChart.showCharts(ChartType.LINE);
						break;
					}
				}
				
				viewDrop.selectedIndex = 0;
			}
			
			
			private function saveToServer():void {
				this.pivotChart.save(
					'report.xml',
					DestinationType.SERVER,
					function(response:*):void {
						Alert.show((response as String),'Report was saved!')
					},
					'http://swat.iknow.com/flex/save.php'
				);
			}
			
			private function saveToFile():void {
				pivotChart.save('report.xml', DestinationType.FILE)
			}
			
			protected function newScenarioSelected(event:MouseEvent):void
			{
				var append:String = "";
				
				if (ORIGINAL_DATA_LOC == null)
				{
					ORIGINAL_DATA_LOC = pivotChart.getReport().filename;
				}
				
				if (LOAD_MODE == loaderMode.UNION)
				{
					var workforceID:String = "0";
					if (sl.unionWorkforceList.selectedItem != null)
						workforceID = sl.unionWorkforceList.selectedItem.id.toString();
					
					var workloadID:String = "0";
					if (sl.unionWorkloadList.selectedItem != null)
						workloadID = sl.unionWorkloadList.selectedItem.id.toString();
					
					append = "&wfScenarioId=" + workforceID + "&wlScenarioId=" + workloadID;
				}
				else
				{
					var scenarioUID:String = sl.myList.selectedItem.id.toString();
					append = "&scenarioId=" + scenarioUID
				}
				
				
				var source_url:String  = ORIGINAL_DATA_LOC + append;	
				var report:ReportValueObject = pivotChart.getReport();
				report.filename = source_url;
				pivotChart.setReport(report);
			}

			
			protected function widgetmodule2_creationCompleteHandler(event:FlexEvent):void
			{
				var report:ReportValueObject = pivotChart.getReport();
				if (ORIGINAL_DATA_LOC == null && report != null)
				{
					ORIGINAL_DATA_LOC = report.filename;
				
				
					if (ORIGINAL_DATA_LOC.indexOf("sbsepivotData") != -1) {
						if (ORIGINAL_DATA_LOC.indexOf("wlwf=wf") != -1)
							LOAD_MODE = loaderMode.SBSE_WORKFORCE;
						else if (ORIGINAL_DATA_LOC.indexOf("wlwf=wl") != -1)
							LOAD_MODE = loaderMode.SBSE_WORKLOAD;
						else if (ORIGINAL_DATA_LOC.indexOf("wlwf=union") != -1)
							LOAD_MODE = loaderMode.SBSE_UNION;
					}
					else
					{
						if (ORIGINAL_DATA_LOC.indexOf("wlwf=wfb") != -1)
							LOAD_MODE = loaderMode.STAFFINGBUDGET;
						else if (ORIGINAL_DATA_LOC.indexOf("wlwf=wf") != -1)
							LOAD_MODE = loaderMode.WORKFORCE;
						else if (ORIGINAL_DATA_LOC.indexOf("wlwf=wl") != -1)
							LOAD_MODE = loaderMode.WORKLOAD;
						else if (ORIGINAL_DATA_LOC.indexOf("wlwf=union") != -1)
							LOAD_MODE = loaderMode.UNION;
					}
					
				}
				
				
				if (HIDE_PIE_CHART == true)
				{
					displayAs.source = ["Display As...","Grid","Bar"];
				}
				else
				{
					displayAs.source = ["Display As...","Grid","Bar","Pie"];
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		
	</fx:Declarations>
	<components:headerContent>
		
		<s:HGroup gap="-3">

			<components:WidgetDropDownList id="exportDrop"
										   verticalScrollPolicy="off"
										   horizontalScrollPolicy="off"
										   selectedIndex="0" 
										   change="setTimeout( export_changeHandler, 100, event )">
				<components:dataProvider>
						<s:ArrayList source="[Export To...,CSV,Image,PDF,Excel,Html]" />
					</components:dataProvider>
			</components:WidgetDropDownList>
			
			<components:WidgetDropDownList id="viewDrop"
										   verticalScrollPolicy="off"
										   horizontalScrollPolicy="off"
										   selectedIndex="0"
										   change="setTimeout( view_changeHandler, 100, event )">
				
				<components:dataProvider>
					<s:ArrayList id="displayAs" source="[Display As...,Grid,Bar,Pie]" />
				</components:dataProvider>
			</components:WidgetDropDownList>
			
			<components:WidgetToggleButton id="scenarioLoadButton"
										   label="Scenario Loader"
										   toolTip="Scenario Loader"
										   click="launchPopUp(event)"/>
			
			<!-- Grid Toggle Button -->
			<components:WidgetToggleButton id="printButton"
										   label="Print"
										   toolTip="Print"
										   click="pivotChart.print()" visible="false" includeInLayout="false" />
			
		</s:HGroup>
		
	</components:headerContent>
	<mx:Canvas label="Switch View" width="100%" height="100%">
		<pivot:FlexPivotComponent id="pivotChart" width="100%" height="100%" x="1" styleName="chartsView" componentFolder="flexmonster/"  configUrl="{this.CONFIG_LOC}"/>
	</mx:Canvas>
</components:WidgetModule>